on:
  workflow_call:
    inputs:
      terraform-version:
        description: "Terraform version to use"
        required: true
        type: string
      deploy_environment:
        description: "which environment to deploy"
        required: true
        type: string
jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.DSC_TF_INTEG_APP_ID }}
          installation_id: ${{ secrets.DSC_TF_INTEG_INSTALLATION_ID}}
          private_key: ${{ secrets.DSC_TF_INTEG_PRIVATE_KEY }}

      - name: Check out code
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        
      - name: Terraform init
        id: init
        run: terraform init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.DSC_TF_INTEG_TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: |
          terraform plan -no-color -out terraform-plan.out
        env:
          TF_VAR_app_id: ${{ secrets.DSC_TF_INTEG_APP_ID }}
          TF_VAR_installation_id: ${{ secrets.DSC_TF_INTEG_INSTALLATION_ID }}
          TF_VAR_private_key: ${{ secrets.DSC_TF_INTEG_PRIVATE_KEY }}
          TF_TOKEN_app_terraform_io: ${{ secrets.DSC_TF_INTEG_TERRAFORM_CLOUD_TOKEN }}
          
      - name: Plan output
        id: output
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            ### Workspace

            \`FPTU DSC GitHub Terraform Member Management\`

            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${process.env.PLAN}
            \`\`\`

            </details>

            **Pusher**: @${{ github.actor }}
            **Action**: ${{ github.event_name }}
            `;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Upload plan
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: terraform-plan.out
          path: terraform-plan.out
  approval-request:
    runs-on: ubuntu-latest
    needs: [plan]
    environment:
      name: ${{ inputs.deploy_environment }}
    name: "Request Approval"
    steps: 
      - name: Approval 
        run: "echo Approval"
  Apply:
    runs-on: ubuntu-latest
    needs: [plan,approval-request]
    environment:
      name: ${{ inputs.deploy_environment }}
    name: "Apply Terraform"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with: 
          name: terraform-plan.out
          path: terraform-plan.out
      - name: Terraform init
        id: init
        run: terraform init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.DSC_TF_INTEG_TERRAFORM_CLOUD_TOKEN }}
      - name: Terraform apply
        id: apply
        run: terraform apply --auto-approve --input=false --lock=true terraform-plan.out

      # - name: Terraform apply
      #   id: apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false
      #   working-directory: ${{ env.working-directory }}
      #   env:
      #     TF_VAR_assume_role: "my-github-actions-role"

      # - name: Infrastructure tests Output
      #   if: always()      
      #   uses: actions/github-script@v3
      #   env:
      #     INSPEC: "Inspec Test Results \n${{ steps.inspec_results.outputs.loginspec }}"
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       const output = `#### Inspec Tests üñå\`${{ steps.inspec.outcome }}\`

      #       <details><summary>Show Test Results</summary>

      #       \`\`\`

      #       ${process.env.INSPEC}
      #       \`\`\`
           
      #       </details>

      #       `;
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })